CONFIG_FILE:
(These are things the config file must keep track of)
The days of PTC (in datetime objects)
Start times of PTC (in datetime objects)

#########

USER (either a student or an administrator, etc):
fname
lname
username
password
email
osis (if student)
four_digit (if student)
organizations (if student)
permissions? <-- TODO: what's the best way to implement this?
days (one to many relatinship with DAY to manage sign ups for a specific day, as well as teachers requesting and so on)

#########

DAY (to manage if students are attending, dynamically):
date
student (relationship with student)
attending
teachers_requested (relationships with teachers, one to many, to allow students to submit requests)
teacher_assigned (relationship one to one, final teacher assigned)
checked_in (logging will provide who checked the user in/out)
checked_in_timestamp
checked_out
checked_out_timestamp

#########

PARENT:
fname
lname
email
phone_number
student (relationship with student, one to many)
id (an id to use for signing up)

#########

TEACHER:
fname
lname
email
identifier
title (Mr., Ms., Mrs.)
room
department
days (one to many relationship with TEACHER_DAY to manage sign ups for a specific day, as well as students requested and so on)
average_time (average time of meeting)

#########

TEACHER_DAY:
date
teacher (relationship to teacher)
attending (if the teacher isn't attending a day, or doesn't want volunteers)
students_requested (relationship with students, one to many, to allow teachers to submit requests)
The final arrangement as to who is assigned to who is handled in the relationship between TEACHER and DAY (which is related to students)

#########

QUEUE:
teacher (one to one)
date (must correspond to date in config file, need mechanism of creating queues for teachers if new date is added, or new teachers are added)
queue (relationship with QUEUE_OBJECT, to manage where people are on the queue)

#########

QUEUE_OBJECT: <-- TODO: is there a better name for this lol
parent_queue (many to one relationship with QUEUE, queue it belongs to)
parent (one to many relationship with PARENT)
position (an integer, say, 1, to control what position on the queue somebody is)
status (a string, 'waiting' if meeting hasn't occured, 'in progress' if meeting is currently happening, 'happened' if meeting has already happened)
length (int measuring length of the meeting, only valid if the session already happened)
